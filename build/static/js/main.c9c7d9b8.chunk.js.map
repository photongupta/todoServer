{"version":3,"sources":["component/todoApi.js","component/WithDelete.js","component/Tasks.js","component/Task.js","component/TextInput.js","component/Title.js","component/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["getTodoDetails","fetch","then","res","json","details","JSON","parse","sendPostReq","url","body","method","headers","stringify","module","exports","addTask","task","removeTask","id","updateTitle","title","updateStatus","resetTodoDetails","WithDelete","Component","props","className","onClick","handleDelete","TaskWithDelete","status","Tasks","todoList","tasks","map","key","TextInput","useState","value","setValue","onSubmit","e","preventDefault","type","onChange","target","defaultProps","Title","isEditable","toggleEditable","inputBox","TitleWithDelete","TodoList","todoDetails","setTodoDetails","useEffect","todoApi","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c9c7d9b8.chunk.js","sourcesContent":["const getTodoDetails = function () {\n  return fetch('api/getTodoDetails')\n    .then((res) => res.json())\n    .then((details) => JSON.parse(details));\n};\n\nconst sendPostReq = function (url, body) {\n  return fetch(url, {\n    method: 'POST',\n    headers: {'Content-Type': 'application/json'},\n    body: JSON.stringify(body),\n  });\n};\n\nconst addTask = (task) =>\n  sendPostReq('api/addTask', {task}).then(getTodoDetails);\n\nconst removeTask = (id) =>\n  sendPostReq('api/removeTask', {id}).then(getTodoDetails);\n\nconst updateStatus = (id) =>\n  sendPostReq('api/updateStatus', {id}).then(getTodoDetails);\n\nconst updateTitle = (title) =>\n  sendPostReq('api/updateTitle', {title}).then(getTodoDetails);\n\nconst resetTodoDetails = () =>\n  sendPostReq('api/resetTodoDetails').then(getTodoDetails);\n\nmodule.exports = {\n  addTask,\n  removeTask,\n  updateTitle,\n  updateStatus,\n  resetTodoDetails,\n  getTodoDetails,\n};\n","import React from 'react';\n\nconst WithDelete = function (Component) {\n  return function (props) {\n    return (\n      <div className=\"container\">\n        <Component {...props} />\n        <div className=\"remove\" onClick={() => props.handleDelete(props.id)}>\n          X\n        </div>\n      </div>\n    );\n  };\n};\n\nexport default WithDelete;\n","import React from 'react';\nimport Task from './Task';\nimport WithDelete from './WithDelete';\n\nconst TaskWithDelete = WithDelete(Task);\n\nconst Tasks = function ({todoList, updateStatus, handleDelete}) {\n  const tasks = todoList.map(({task, status, id}) => (\n    <TaskWithDelete\n      key={id}\n      id={id}\n      task={task}\n      status={status}\n      updateStatus={updateStatus}\n      handleDelete={handleDelete}\n    />\n  ));\n  return <div>{tasks}</div>;\n};\n\nexport default Tasks;\n","import React from 'react';\n\nconst Task = function ({task, status, updateStatus, id}) {\n  return (\n    <p className={`todoBox ${status}`} onClick={() => updateStatus(id)}>\n      {task}\n    </p>\n  );\n};\nexport default Task;\n","import React, {useState} from 'react';\n\nconst TextInput = function (props) {\n  const [value, setValue] = useState(props.value);\n\n  const handleChange = (e) => setValue(e.target.value);\n\n  const handleSubmit = function (e) {\n    e.preventDefault();\n    if (value) {\n      props.onSubmit(value);\n      setValue('');\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" value={value} onChange={handleChange} />\n    </form>\n  );\n};\n\nTextInput.defaultProps = {value: ''};\n\nexport default TextInput;\n","import React, {useState} from 'react';\nimport TextInput from './TextInput';\n\nconst Title = function (props) {\n  const [isEditable, toggleEditable] = useState(false);\n\n  const updateTitle = function (title) {\n    toggleEditable(!isEditable);\n    props.updateTitle(title);\n  };\n\n  const title = (\n    <p className=\"title\" onClick={() => toggleEditable(!isEditable)}>\n      {props.value}\n    </p>\n  );\n  const inputBox = <TextInput onSubmit={updateTitle} value={props.value} />;\n  return isEditable ? inputBox : title;\n};\n\nexport default Title;\n","import React, {useState, useEffect} from 'react';\nimport Tasks from './Tasks';\nimport TextInput from './TextInput';\nimport Title from './Title';\nimport WithDelete from './WithDelete';\nimport todoApi from './todoApi';\n\nconst TitleWithDelete = WithDelete(Title);\n\nconst TodoList = function () {\n  let [todoDetails, setTodoDetails] = useState(null);\n\n  const addTask = (task) => todoApi.addTask(task).then(setTodoDetails);\n\n  const removeTask = (id) => todoApi.removeTask(id).then(setTodoDetails);\n\n  const updateStatus = (id) => todoApi.updateStatus(id).then(setTodoDetails);\n\n  const updateTitle = (title) =>\n    todoApi.updateTitle(title).then(setTodoDetails);\n\n  const resetTodoDetails = () =>\n    todoApi.resetTodoDetails().then(setTodoDetails);\n\n  useEffect(() => {\n    todoApi.getTodoDetails().then(setTodoDetails);\n  }, []);\n\n  if (!todoDetails) {\n    return <h3>Loading...</h3>;\n  }\n\n  return (\n    <div className=\"todoList\">\n      <TitleWithDelete\n        updateTitle={updateTitle}\n        value={todoDetails.title}\n        handleDelete={resetTodoDetails}\n      />\n      <Tasks\n        todoList={todoDetails.todoList}\n        updateStatus={updateStatus}\n        handleDelete={removeTask}\n      />\n      <TextInput onSubmit={addTask} />\n    </div>\n  );\n};\n\nexport default TodoList;\n","import React from 'react';\nimport './App.css';\nimport TodoList from './component/TodoList';\n\nconst App = () => <TodoList />;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}